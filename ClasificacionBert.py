# Importamos las bibliotecas necesarias
import torch  # Para trabajar con tensores y la inferencia en el modelo
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments  # Hugging Face para modelos NLP
from datasets import Dataset, DatasetDict  # Para manejar datasets estructurados
import numpy as np  # Para trabajar con c√°lculos num√©ricos
from sklearn.metrics import accuracy_score, precision_recall_fscore_support  # M√©tricas para evaluar el modelo

# üìå Paso 1: Definir los datos de entrenamiento
texts = [
    "Los paneles solares son una fuente eficiente de energ√≠a renovable.",
    "El carb√≥n sigue siendo una fuente importante de energ√≠a en muchos pa√≠ses.",
    "La energ√≠a e√≥lica est√° ganando popularidad en todo el mundo.",
    "Las centrales nucleares son controversiales pero producen energ√≠a sin emisiones de CO2.",
    "La biomasa es una forma de energ√≠a renovable que utiliza materiales org√°nicos.",
]
labels = [1, 0, 1, 0, 1]  # 1 para energ√≠a renovable, 0 para energ√≠a no renovable

# üìå Paso 2: Crear un Dataset de Hugging Face
# Convierte los datos en un objeto DatasetDict para poder manipularlo f√°cilmente en el entrenamiento
dataset = DatasetDict({"train": Dataset.from_dict({"text": texts, "label": labels})})

# üìå Paso 3: Cargar el tokenizador y el modelo pre-entrenado BERT
# "bert-base-uncased" es un modelo de BERT en ingl√©s sin distinci√≥n entre may√∫sculas y min√∫sculas
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=2)  # num_labels=2 indica clasificaci√≥n binaria

# üìå Paso 4: Funci√≥n para convertir los textos en tokens
def tokenize_function(examples):
    return tokenizer(examples["text"], padding="max_length", truncation=True)

# Aplicamos la funci√≥n a nuestro dataset para convertir los textos en vectores num√©ricos
tokenized_dataset = dataset.map(tokenize_function)

# üìå Paso 5: Dividir los datos en entrenamiento (80%) y prueba (20%)
split_dataset = tokenized_dataset["train"].train_test_split(test_size=0.2)

# Convertimos el dataset dividido en un DatasetDict para usarlo en entrenamiento
dataset = DatasetDict({
    "train": split_dataset["train"],
    "test": split_dataset["test"]
})

# üìå Paso 6: Definir una funci√≥n para calcular m√©tricas de rendimiento
def compute_metrics(eval_pred):
    logits, labels = eval_pred.predictions, eval_pred.label_ids  # Extraemos predicciones y etiquetas reales
    predictions = np.argmax(logits, axis=-1)  # Convertimos los logits en clases (0 o 1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, predictions, average='binary')
    acc = accuracy_score(labels, predictions)
    return {
        'accuracy': acc,
        'f1': f1,
        'precision': precision,
        'recall': recall
    }

# üìå Paso 7: Configurar los par√°metros de entrenamiento
training_args = TrainingArguments(
    output_dir="./results",  # Carpeta donde se guardar√°n los resultados
    num_train_epochs=3,  # N√∫mero de veces que el modelo ver√° los datos de entrenamiento
    per_device_train_batch_size=8,  # Tama√±o del batch en entrenamiento
    per_device_eval_batch_size=8,  # Tama√±o del batch en evaluaci√≥n
    warmup_steps=500,  # Pasos de calentamiento para optimizaci√≥n
    weight_decay=0.01,  # Regularizaci√≥n para evitar sobreajuste
    logging_dir='./logs',  # Carpeta donde se guardar√°n los logs de entrenamiento
    logging_steps=10,  # Se registrar√°n logs cada 10 pasos
    evaluation_strategy="epoch",  # Se evaluar√° el modelo al final de cada √©poca
)

# üìå Paso 8: Crear el Trainer (gestiona el entrenamiento y evaluaci√≥n del modelo)
trainer = Trainer(
    model=model,  # Modelo BERT para clasificaci√≥n
    args=training_args,  # Par√°metros de entrenamiento
    train_dataset=dataset["train"],  # Datos de entrenamiento
    eval_dataset=dataset["test"],  # Datos de evaluaci√≥n
    compute_metrics=compute_metrics,  # Funci√≥n de m√©tricas para evaluaci√≥n
)

# üìå Paso 9: Entrenar el modelo
trainer.train()

# üìå Paso 10: Evaluar el modelo despu√©s del entrenamiento
eval_results = trainer.evaluate()
print(eval_results)  # Muestra las m√©tricas de rendimiento del modelo

# üìå Paso 11: Hacer una predicci√≥n con un nuevo texto
text = "La energ√≠a geot√©rmica aprovecha el calor de la Tierra."
inputs = tokenizer(text, return_tensors="pt")  # Convertimos el texto en tensores de entrada para PyTorch

# Desactivamos el c√°lculo de gradientes ya que solo queremos hacer inferencia
with torch.no_grad():
    outputs = model(**inputs)  # Pasamos los datos al modelo y obtenemos la salida

# Extraemos la predicci√≥n y la convertimos en una categor√≠a (0 o 1)
prediction = torch.argmax(outputs.logits, dim=-1).item()

# Mostramos la predicci√≥n final
print(f"Predicci√≥n: {'Energ√≠a Renovable' if prediction == 1 else 'Energ√≠a No Renovable'}")
